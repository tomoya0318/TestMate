generator client {
  provider = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?       @map("email_verified")
  introduce     String?
  image         String?
  accounts      Account[]
  posts         Post[]
  sessions      Session[]
  likes         Like[]
  comments      Comment[]
  testers       Tester[]
  @@map("users")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Post {
  id             String       @id @default(cuid())
  title          String
  short          String
  description    String
  iconUrl        String       @map("icon_url")
  screenshots    String[]
  groupUrl       String       @map("group_url")
  storeUrl       String       @map("store_url")
  createdAt      DateTime     @map("created_at") @default(now())
  updatedAt      DateTime     @map("updated_at") @updatedAt
  userId         String
  user           User     @relation(fields: [userId], references: [id])
  likes          Like[]
  tags           PostTag[]
  comments       Comment[]
  testers        Tester[]
  @@index([userId])
  @@map("posts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @map("created_at") @default(now())
  updatedAt    DateTime @map("updated_at") @updatedAt
  @@map("sessions")
}

model Like {
  user      User       @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId    String     @map("user_id") 
  post      Post       @relation(fields: [postId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  postId    String     @map("post_id") 
  createdAt DateTime   @map("created_at") @default(now())
  updatedAt DateTime   @map("updated_at") @updatedAt
  @@id([userId, postId])
  @@map("likes")
}

model Tag {
  id            String     @id @default(cuid())
  appType       String     @map("app_type")  
  category      String
  publicStatus  String     @map("public_status")
  posts         PostTag[]
  @@map("tags")  
}


model PostTag {
  postId String @map("post_id")
  tagId  String @map("tag_id")
  post   Post   @relation(fields: [postId], references: [id])
  tag    Tag    @relation(fields: [tagId], references: [id])

  @@id([postId, tagId])
  @@map("posts_tags")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @map("created_at")  @default(now())
  postId    String   @map("post_id")
  userId    String   @map("user_id")
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@index([postId])
  @@index([userId])
  @@map("comments")
}

model Tester {
  id String          @id @default(cuid())
  postId    String   @map("post_id")
  userId    String   @map("user_id")
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@index([postId])
  @@index([userId])
  @@map("testers")
}