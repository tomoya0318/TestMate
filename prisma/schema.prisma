generator client {
  provider = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  introduce     String?
  image         String?
  accounts      Account[]
  post          Post[]
  sessions      Session[]
  likes         Like[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Post {
  id             String       @id @default(cuid())
  title          String
  short          String
  description    String
  iconUrl        String
  screenshots    String[]
  groupUrl       String
  storeUrl       String
  date           DateTime @default(now())
  userId         String
  user           User     @relation(fields: [userId], references: [id])
  likes Like[]
  tags  PostTags[]
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Like {
  user    User       @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId  String     @map("user_id") 
  post    Post       @relation(fields: [postId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  postId  String        @map("post_id") 
  createdAt DateTime @map("created_at") @default(now())
  @@id([userId, postId])
  @@map("likes")
}

model Tags {
  id          String      @id @default(cuid())
  posts       PostTags[]
  appType     String      
  categories  String[]    
  status      String      
}


model PostTags {
  post   Post  @relation(fields: [postId], references: [id])
  postId String
  tag    Tags   @relation(fields: [tagId], references: [id])
  tagId  String

  @@id([postId, tagId])
}
